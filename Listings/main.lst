C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "IOConfig.h"
   2          #include "LCD12864.h"
   3          #include "DS3231.h"
   4          #include "AT24C32.h"
   5          #include "Delay.h"
   6          #include "KeyScan.h"
   7          #include <string.h>
   8          #include "GSM.h"
   9          
  10          //define the value of scanning time flag
  11          bit flagCollent = 0, clrFlag = 0, enableCall = 0;
  12          //define the value of scanning time collecter
  13          xdata uchar sweepIntervalCollect, vi = 0;
  14          //use to display a character on lcd12864
  15          code uchar disCode[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
  16          //order: second minute hour week day month year
  17          code uint setTimes[] = {40, 37, 22, 6, 25, 12, 17};
  18          //the array of current time's datas, use as the function DS3231ReadTimes's return value
  19          xdata uint currentTimes[7], curTmp[2];
  20          //the array of week
  21          code uchar *wdays[7] = {"SUN", "MON", "TUS", "WEN", "THR", "FRI", "SAT"};
  22          //temperary var 
  23          xdata uint tmp = 0, calTimes = 0, calTimes1 = 0;
  24          
  25          /*******************************************************************************
  26          * @function        : validPassword
  27          * @brief           : check the password valid
  28          * @param           : p : user/admin inputed password, p1 : the store password
  29          * @retval          : 1 : password error, 0 password correct
  30          *******************************************************************************/
  31          bit validPassword(uchar *p, uchar *p1){
  32   1        vi = 0;
  33   1        while(p[vi] != '\0' && vi < 7){//valid password
  34   2          if(p[vi] != p1[vi])//if not equal
  35   2            return 1;//failed
  36   2          vi++;
  37   2        }
  38   1      
  39   1        if(vi < 6)
  40   1          return 1;//failed
  41   1        return 0;//success
  42   1      }
  43          
  44          /*******************************************************************************
  45          * @function        : Time0Init
  46          * @brief           : init t0
  47          * @param           : none
  48          * @retval          : none
  49          *******************************************************************************/
  50          void Time0Init(void){//50ms @11.0592mhz
  51   1          TMOD |= 0x01;         //t0, mod 1
  52   1          TH0 = TH0_PREVAL;    //high 8bit prevalue
  53   1          TL0 = TL0_PREVAL;    //low 8bit prevalue
  54   1          TR0 = 1;             //running the t0
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 2   

  55   1          ET0 = 1;             //enable the t0 interrupt
  56   1          PT0 = 1;             //High interrupt request priority
  57   1          EA=1;                //enable the global interrupt
  58   1      }
  59          
  60          /*******************************************************************************
  61          * @function        : int0Init
  62          * @brief           : init int0
  63          * @param           : flag used to disable EX0 or enable EX0
  64          * @retval          : none
  65          *******************************************************************************/
  66          void int0Init(bit flag){
  67   1        IT0 = 0;
  68   1        PX0 = 0;//Low interrupt request priority
  69   1        EX0 = (1 == flag ? 1 : 0);
  70   1        EA = 1;
  71   1      }
  72          
  73          /*******************************************************************************
  74          * @function        : main
  75          * @brief           : none
  76          * @param           : none
  77          * @retval          : none
  78          *******************************************************************************/
  79          void main(){
  80   1        //var definition
  81   1        uchar State_Timing, p[7], p1[7], name[17], times, i;
  82   1        uint  secValChange, dayValChange, tmpHValChange, tmpLValChange, key;
  83   1        bit flag;
  84   1        
  85   1        //device init
  86   1        lockOn();
  87   1        initI2C();
  88   1        resetBitPlayL();
  89   1        resetBitBuzz();
  90   1        GSMInit();
  91   1        writeByte2Addr(0, USR_ERROR_TIMES, 3, AT24C02_WRITE_CMD, 1);
  92   1        start:
  93   1        LCD12864_Init();
  94   1        int0Init(1);
  95   1        Time0Init();
  96   1        
  97   1        //the main loop
  98   1        while(1){
  99   2          LCD12864_WriteCmd(SLEEP_CMD);//lcd12864 sleep
 100   2          while(keyValToChar(keyScanGetVal()) == 0x00);//wait for key press
 101   2          LCD12864_WriteCmd(WAKE_UP_CMD);//lcd12864 wake up
 102   2          again:
 103   2          LCD12864_Init();//init lcd12864
 104   2          //outdoor main view
 105   2          LCD12864_WriteArray("  Smart  Home  ", 0, 0);
 106   2          LCD12864_WriteArray("open:C,out:B", 1, 0);
 107   2          
 108   2          do{
 109   3            LCD12864_WriteArray("            ", 3, 0);
 110   3            while((key = keyValToChar(keyScanGetVal())) == 0x00);//wait for key press
 111   3            LCD12864_SetWindow(2, 0);
 112   3            LCD12864_WriteData(key);
 113   3            if('c' != key && 'b' != key && 'a' != key){
 114   4              LCD12864_WriteArray("input error!", 3, 0);
 115   4            } else break;
 116   3          }while(1);
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 3   

 117   2          
 118   2          switch(key){
 119   3          case 'c':{//user view
 120   4            closeINT0();
 121   4            stopT0();
 122   4            memset(name, 0, 17 * sizeof(uchar));
 123   4            memset(p1, 0, 7 * sizeof(uchar));
 124   4            readArray(name, 0, USR_NAME, 16, AT24C02_WRITE_CMD, AT24C02_READ_CMD, 1);
 125   4            readArray(p1, 0, USR_PWD, 6, AT24C02_WRITE_CMD, AT24C02_READ_CMD, 1);
 126   4            times = readByteFromAddr(0, USR_ERROR_TIMES, AT24C02_WRITE_CMD, AT24C02_READ_CMD, 1);
 127   4            
 128   4            if(times == 0){
 129   5              LCD12864_WriteArray("user freezed!", 3, 0);
 130   5              break;
 131   5            }
 132   4            
 133   4            LCD12864_Init();
 134   4            LCD12864_WriteArray("usr:", 0, 0);
 135   4            LCD12864_WriteArray(name, 0, 2);
 136   4            LCD12864_WriteArray("P:", 1, 0);
 137   4            LCD12864_SetWindow(1, 1);
 138   4            memset(p, 0, 7 * sizeof(uchar));
 139   4            i = 0;
 140   4            flag = 1;
 141   4            do{//input password
 142   5              if(i > 6){
 143   6                i = 0;
 144   6                LCD12864_WriteArray("P:          ", 1, 0);
 145   6                LCD12864_WriteArray("len limit 6!", 2, 0);
 146   6                LCD12864_SetWindow(1, 1);
 147   6                memset(p, 0, 7 * sizeof(uchar));
 148   6                clrFlag = 1;
 149   6              }
 150   5              LCD12864_WriteCmd(ON_SHOW_ON_PTR_CMD);
 151   5              while((key = keyValToChar(keyScanGetVal())) == 0x00);//wait for key press
 152   5            
 153   5              if('d' == key && i > 0){//delete an input
 154   6                LCD12864_WriteArray("P:         ", 1, 0);
 155   6                
 156   6                LCD12864_SetWindow(1, 1);
 157   6                for(vi = 0; vi < i - 1; vi++)
 158   6                  LCD12864_WriteData('*');
 159   6                i--;
 160   6              } else if('*' == key){//confirm password and then the cpu will valid the password
 161   6                p[6] = '\0';
 162   6                if(!validPassword(p, p1)){//success
 163   7                  flag = 0;
 164   7                  break;
 165   7                }
 166   6                
 167   6                times--;
 168   6                if(times == 0){
 169   7                  writeByte2Addr(0, USR_ERROR_TIMES, 0, AT24C02_WRITE_CMD, 1);
 170   7                  setBitBuzz();
 171   7                  delayMs(50);
 172   7                  resetBitBuzz();
 173   7                  delayMs(50);
 174   7                  setBitBuzz();
 175   7                  delayMs(50);
 176   7                  resetBitBuzz();
 177   7                  delayMs(50);
 178   7                  setBitBuzz();
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 4   

 179   7                  delayMs(50);
 180   7                  resetBitBuzz();
 181   7                  delayMs(50);
 182   7                  sendArray("AT^SMSN=13250738627 Password_Error_Times_Too_Many!You_Account_Has_Been_Freezed!");
 183   7                  sendAChar(0x0d);
 184   7                  sendAChar(0x0a);
 185   7                  delayMs(1000);
 186   7                  break;
 187   7                }
 188   6      
 189   6                LCD12864_WriteArray("password error!", 2, 0);
 190   6                LCD12864_WriteArray("times:", 3, 0);
 191   6                LCD12864_WriteData(disCode[times]);
 192   6                i = 0;
 193   6                LCD12864_WriteArray("P:         ", 1, 0);
 194   6                memset(p, 0, 7 * sizeof(uchar));
 195   6                LCD12864_SetWindow(1, 1);
 196   6                clrFlag = 1;
 197   6                if(times == 2){
 198   7                  setBitBuzz();
 199   7                  delayMs(50);
 200   7                  resetBitBuzz();
 201   7                  delayMs(50);
 202   7                } else if(times == 1){
 203   7                  setBitBuzz();
 204   7                  delayMs(50);
 205   7                  resetBitBuzz();
 206   7                  delayMs(50);
 207   7                  setBitBuzz();
 208   7                  delayMs(50);
 209   7                  resetBitBuzz();
 210   7                  delayMs(50);
 211   7                }
 212   6              } else if('#' == key || 'b' == key){//quit input and then the view will back to the welcome view
 213   6                break;//failed
 214   6              } else if('a' == key || 'c' == key){//error input
 215   6                LCD12864_WriteArray("input error!", 2, 0);
 216   6                clrFlag = 1;
 217   6              }
 218   5              
 219   5              if(key >= '0' && key <= '9'){//if user input password correctly, the cursor's address will auto plus 1
             -;
 220   6                if(i <= 5)
 221   6                  p[i] = key;
 222   6                i++;
 223   6                LCD12864_SetWindow(1, 1);
 224   6                for(vi = 0; vi < i; vi++)
 225   6                  LCD12864_WriteData('*');
 226   6                LCD12864_WriteCmd(ON_SHOW_CLOSE_PTR_CMD);
 227   6                if(clrFlag == 1){
 228   7                  LCD12864_WriteArray("               ", 2, 0);
 229   7                  LCD12864_WriteArray("               ", 3, 0);
 230   7                  LCD12864_SetWindow(1, 1);
 231   7                  clrFlag = 0;
 232   7                }
 233   6              }
 234   5              
 235   5            }while(1);
 236   4            //user enters the indoor view
 237   4            runT0();
 238   4            if(!flag){
 239   5              setBitBuzz();
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 5   

 240   5              delayMs(200);
 241   5              resetBitBuzz();
 242   5              unlock();
 243   5              delayMs(200);
 244   5              lockOn();
 245   5              
 246   5              LCD12864_Init();
 247   5              
 248   5              //ds3231 init
 249   5              State_Timing = DS3231ReadAByteOfStatus(DS3231_STATUS);//whether to adjust time
 250   5              if(State_Timing & 0x80){                      //whether the ds3231 had been power down
 251   6                DS3231Init();                               //init DS3231
 252   6                DS3231SetTimes(setTimes);
 253   6              }
 254   5      
 255   5              DS3231ReadTimes(currentTimes);               //ds3231 power down detech. valid when run of power or sh
             -ort circuit. So everytime to power on when read current time
 256   5              if(currentTimes[6] == 0x00){                 //deteching the year original data, if it equals 0x00 mea
             -ns that needs to set time
 257   6                DS3231Init();                              //init ds3231 again
 258   6                DS3231SetTimes(setTimes);
 259   6              }
 260   5              
 261   5              DS3231ReadTimes(currentTimes);
 262   5              autoWeek(currentTimes[6], currentTimes[5], currentTimes[4]);
 263   5              
 264   5              while(1){//show date and temperature informations
 265   6                LCD12864_WriteArray("b: outdoor  ", 2, 0);
 266   6                key = keyValToChar(keyScanGetVal());
 267   6                
 268   6                if(key != 0x00 && key == 'b'){//press the b button to out the system
 269   7                  LCD12864_WriteData(key);
 270   7                  LCD12864_WriteArray("see you!", 3, 0);
 271   7                  unlock();
 272   7                  delayMs(200);
 273   7                  lockOn();
 274   7                  dayValChange = 100;
 275   7                  goto start;
 276   7                }
 277   6                
 278   6                while(flagCollent){ //flagCollent it is time to read times' datas from ds3231
 279   7                  EA = 0;
 280   7                  DS3231ReadTimes(currentTimes);
 281   7                  DS3231ReadTmp(curTmp);
 282   7                  
 283   7                  //days info
 284   7                  if(dayValChange != currentTimes[4]){
 285   8                    dayValChange = currentTimes[4];
 286   8                    LCD12864_SetWindow(0, 0);
 287   8                    LCD12864_WriteData('2');
 288   8                    LCD12864_WriteData('0');
 289   8                    LCD12864_WriteData(disCode[currentTimes[6] / 10]);
 290   8                    LCD12864_WriteData(disCode[currentTimes[6] % 10]);
 291   8                    LCD12864_WriteData('/');
 292   8                    LCD12864_WriteData(disCode[currentTimes[5] / 10]);
 293   8                    LCD12864_WriteData(disCode[currentTimes[5] % 10]);
 294   8                    LCD12864_WriteData('/');
 295   8                    LCD12864_WriteData(disCode[currentTimes[4] / 10]);
 296   8                    LCD12864_WriteData(disCode[currentTimes[4] % 10]);
 297   8      
 298   8                    for(i = 0; i < 4; i++){
 299   9                      if(i == 0) LCD12864_WriteData(' ');
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 6   

 300   9                      else LCD12864_WriteData(*(wdays[currentTimes[3] - 1] + i - 1));
 301   9                    }
 302   8                    i = 0;
 303   8                  }
 304   7                  
 305   7                  //time info
 306   7                  if(secValChange != currentTimes[0]){
 307   8                    secValChange = currentTimes[0];
 308   8                    LCD12864_SetWindow(1, 0);
 309   8                    LCD12864_WriteData(disCode[currentTimes[2] / 10]);
 310   8                    LCD12864_WriteData(disCode[currentTimes[2] % 10]);
 311   8                    LCD12864_WriteData(':');
 312   8                    LCD12864_WriteData(disCode[currentTimes[1] / 10]);
 313   8                    LCD12864_WriteData(disCode[currentTimes[1] % 10]);
 314   8                    LCD12864_WriteData(':');
 315   8                    LCD12864_WriteData(disCode[currentTimes[0] / 10]);
 316   8                    LCD12864_WriteData(disCode[currentTimes[0] % 10]);
 317   8                  }
 318   7                  
 319   7                  //temperature info
 320   7                  if(tmpHValChange != curTmp[0] || tmpLValChange != curTmp[1]){
 321   8      
 322   8                    if((curTmp[0] & 0x80) == 0)
 323   8                      LCD12864_WriteData(' ');
 324   8                     else {
 325   9                      tmp = curTmp[0];
 326   9                      tmp <<= 2;
 327   9                      curTmp[1] >>= 6;
 328   9                      tmp += curTmp[1];
 329   9                      tmp = (~tmp) + 1;//two's complement
 330   9                      tmp = tmp & 0x03ff;
 331   9                      curTmp[1] = tmp & 0x0003;
 332   9                      curTmp[1] = curTmp[1] * 25;
 333   9                      curTmp[0] = tmp >> 2;
 334   9      
 335   9                      LCD12864_WriteData('-');
 336   9                    }
 337   8                    LCD12864_WriteData(disCode[curTmp[0] / 10]);
 338   8                    LCD12864_WriteData(disCode[curTmp[0] % 10]);
 339   8                    LCD12864_WriteData('.');
 340   8                    LCD12864_WriteData(disCode[curTmp[1] / 10]);
 341   8                    LCD12864_WriteData(disCode[curTmp[1] % 10]);
 342   8                    LCD12864_WriteData('\'');
 343   8                    LCD12864_WriteData('C');
 344   8      
 345   8                    tmpHValChange = currentTimes[0];
 346   8                    tmpLValChange = currentTimes[1];
 347   8                  }
 348   7      
 349   7                  flagCollent = 0;
 350   7                  EA = 1;
 351   7                }
 352   6              }
 353   5            } else {
 354   5              int0Init(1);
 355   5              runT0();
 356   5              LCD12864_Init();
 357   5              goto start;
 358   5            }
 359   4            
 360   4          }break;
 361   3          case 'b':{//out system
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 7   

 362   4              int0Init(1);
 363   4              runT0();
 364   4              LCD12864_Init();
 365   4              goto start;
 366   4          }break;
 367   3          case 'a':{//admin view
 368   4            closeINT0();
 369   4            stopT0();
 370   4            memset(name, 0, 17 * sizeof(uchar));
 371   4            memset(p1, 0, 7 * sizeof(uchar));
 372   4            readArray(name, 0, ADMIN_NAME, 16, AT24C02_WRITE_CMD, AT24C02_READ_CMD, 1);
 373   4            readArray(p1, 0, ADMIN_PWD, 6, AT24C02_WRITE_CMD, AT24C02_READ_CMD, 1);
 374   4            
 375   4            LCD12864_Init();
 376   4            LCD12864_WriteArray("welcome ADMIN", 0, 0);
 377   4            LCD12864_WriteArray(name, 1, 0);
 378   4            LCD12864_WriteArray("P:", 2, 0);
 379   4            LCD12864_SetWindow(2, 1);
 380   4            memset(p, 0, 7 * sizeof(uchar));
 381   4            i = 0;
 382   4            flag = 1;
 383   4            
 384   4            do{//input admin password
 385   5              if(i > 6){
 386   6                i = 0;
 387   6                LCD12864_WriteArray("P:          ", 2, 0);
 388   6                LCD12864_WriteArray("len limit 6!", 3, 0);
 389   6                LCD12864_SetWindow(2, 1);
 390   6                memset(p, 0, 7 * sizeof(uchar));
 391   6                clrFlag = 1;
 392   6              }
 393   5              LCD12864_WriteCmd(ON_SHOW_ON_PTR_CMD);
 394   5              while((key = keyValToChar(keyScanGetVal())) == 0x00);//wait for key press
 395   5            
 396   5              if('d' == key && i > 0){//delete an input
 397   6                LCD12864_WriteArray("P:         ", 2, 0);
 398   6                
 399   6                LCD12864_SetWindow(2, 1);
 400   6                for(vi = 0; vi < i - 1; vi++)
 401   6                  LCD12864_WriteData('*');
 402   6                i--;
 403   6              } else if('*' == key){//confirm password and then the cpu will valid the password
 404   6                p[6] = '\0';
 405   6                if(!validPassword(p, p1)){//success
 406   7                  flag = 0;
 407   7                  break;
 408   7                }
 409   6                
 410   6                LCD12864_WriteArray("password error!", 3, 0);
 411   6                i = 0;
 412   6                LCD12864_WriteArray("P:         ", 2, 0);
 413   6                memset(p, 0, 7 * sizeof(uchar));
 414   6                LCD12864_SetWindow(2, 1);
 415   6                clrFlag = 1;
 416   6                
 417   6                setBitBuzz();
 418   6                delayMs(50);
 419   6                resetBitBuzz();
 420   6              } else if('#' == key || 'b' == key){//quit input and then the view will back to the welcome view
 421   6                break;//failed
 422   6              } else if('a' == key || 'c' == key){//error input
 423   6                LCD12864_WriteArray("input error!", 3, 0);
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 8   

 424   6                clrFlag = 1;
 425   6              }
 426   5              
 427   5              if(key >= '0' && key <= '9'){//if admin input password correctly, the cursor's address will auto plus 
             -1;
 428   6                if(i <= 5)
 429   6                  p[i] = key;
 430   6                i++;
 431   6                LCD12864_SetWindow(2, 1);
 432   6                for(vi = 0; vi < i; vi++)
 433   6                  LCD12864_WriteData('*');
 434   6                LCD12864_WriteCmd(ON_SHOW_CLOSE_PTR_CMD);
 435   6                if(clrFlag == 1){
 436   7                  LCD12864_WriteArray("               ", 3, 0);
 437   7                  LCD12864_SetWindow(2, 1);
 438   7                  clrFlag = 0;
 439   7                }
 440   6              }
 441   5              
 442   5            }while(1);
 443   4            
 444   4            //after admin entered
 445   4            if(!flag){
 446   5              LCD12864_Init();
 447   5              LCD12864_WriteArray("1.active usr", 0, 0);
 448   5              LCD12864_WriteArray("2.new password", 1, 0);
 449   5              LCD12864_WriteArray("others to quit", 2, 0);
 450   5              LCD12864_WriteArray("input:", 3, 0);
 451   5              while((key = keyValToChar(keyScanGetVal())) == 0x00);//wait for key press
 452   5              LCD12864_WriteData(key);
 453   5              if(key == '1'){//active user when user has been freezed
 454   6                writeByte2Addr(0, USR_ERROR_TIMES, 3, AT24C02_WRITE_CMD, 1);
 455   6              } else if(key == '2'){
 456   6                LCD12864_Init();
 457   6                LCD12864_WriteArray("Only 0~9", 0, 0);
 458   6                LCD12864_WriteArray("len limit 6!", 1, 0);
 459   6                LCD12864_WriteArray("new P:", 2, 0);
 460   6                memset(p, 0, 7 * sizeof(uchar));
 461   6                for(vi = 0; vi < 6; vi++){//input user's new password
 462   7                  while((key = keyValToChar(keyScanGetVal())) == 0x00);//wait for key press
 463   7                  if(key >= '0' && key <= '9'){
 464   8                    LCD12864_WriteData('*');
 465   8                    p[vi] = key;
 466   8                  } else if(key == '#') {
 467   8                    int0Init(1);
 468   8                    runT0();
 469   8                    goto again;
 470   8                  } else {
 471   8                    vi--;
 472   8                  }
 473   7                }
 474   6                
 475   6                while((key = keyValToChar(keyScanGetVal())) == 0x00);//wait for key press
 476   6                if('*' == key){
 477   7                  p[6] = '\0';
 478   7                  writeArray(p, 0, USR_PWD, 7, AT24C02_WRITE_CMD, 1);
 479   7                }
 480   6              }
 481   5              
 482   5            }
 483   4            int0Init(1);
 484   4            runT0();
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 9   

 485   4            goto again;
 486   4          }break;
 487   3          default:
 488   3            break;
 489   3        }
 490   2          
 491   2        }
 492   1      }
 493          
 494          //infrared body sensor alarm
 495          void Interrupt0Handler(void) interrupt 0 using 1{
 496   1        ET0 = 0;
 497   1        EX0 = 0;
 498   1        setBitPlayL();
 499   1        delayMs(600);
 500   1        resetBitPlayL();
 501   1        delayMs(50);
 502   1        LCD12864_WriteCmd(WAKE_UP_CMD);
 503   1        LCD12864_WriteArray("Thief in room!", 3, 0);
 504   1        if(enableCall){
 505   2      
 506   2          enableCall = 0;
 507   2          //sent message to 13250738627
 508   2          LCD12864_WriteArray("Sending SMS!     ", 3, 0);
 509   2          setBitBuzz();
 510   2          delayMs(200);
 511   2          resetBitBuzz();
 512   2          sendSMSMode();
 513   2        }
 514   1        delayMs(500);
 515   1        LCD12864_Init();
 516   1        LCD12864_Init();
 517   1        LCD12864_WriteCmd(SLEEP_CMD);
 518   1        EX0 = 1;
 519   1        ET0 = 1;
 520   1      }
 521          
 522          //timer0 interruption handler. Using to read ds3231's times datas
 523          void Time0Handler(void) interrupt 1 using 3 {
 524   1        TR0 = 0;
 525   1        TH0 = TH0_PREVAL; //50ms timing
 526   1        TL0 = TL0_PREVAL;
 527   1        TR0 = 1;
 528   1        if(sweepIntervalCollect >= 0x06){    //about 0.3s after : calling the cpu to read times' datas from ds323
             -1
 529   2          flagCollent = 1;
 530   2          sweepIntervalCollect = 0;
 531   2          calTimes1++;
 532   2        }
 533   1        
 534   1        if(calTimes1 >= 0x32){
 535   2          if(calTimes == 0x01){//1min
 536   3            enableCall = 1;
 537   3            calTimes = 0;
 538   3          } else
 539   2            calTimes++;
 540   2          calTimes1 = 0;
 541   2        }
 542   1        else{
 543   2          sweepIntervalCollect++;
 544   2        }
 545   1      }
C51 COMPILER V9.56.0.0   MAIN                                                              12/26/2017 12:46:04 PAGE 10  

 546          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3392    ----
   CONSTANT SIZE    =    442    ----
   XDATA SIZE       =     26    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      49
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
