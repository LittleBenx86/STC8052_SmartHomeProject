C51 COMPILER V9.56.0.0   DS3231                                                            12/26/2017 12:46:04 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DS3231
OBJECT MODULE PLACED IN .\Objects\DS3231.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE DS3231.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\DS
                    -3231.lst) TABS(2) OBJECT(.\Objects\DS3231.obj)

line level    source

   1          #include "DS3231.h"
   2          
   3          /*******************************************
   4           * @author Unicorn
   5           * @date 2017-12-22
   6           */
   7          
   8          code unsigned char WeekTab[] = {//the week table of leap year & month
   9            (3 << 5) + 31,//January
  10            (6 << 5) + 29,//February
  11            (0 << 5) + 31,//March
  12            (3 << 5) + 30,//April
  13            (5 << 5) + 31,//May
  14            (1 << 5) + 30,//June
  15            (3 << 5) + 31,//July
  16            (6 << 5) + 31,//August
  17            (1 << 5) + 30,//Setember
  18            (4 << 5) + 31,//October
  19            (0 << 5) + 30,//November
  20            (2 << 5) + 31 //December
  21          };
  22          
  23          
  24          /*******************************************************************************
  25          * @function        : ds3231 modify a byte
  26          * @brief         : modify a byte to ds3231's specified address register
  27          * @param           : addr : the specified address, val : the new byte value
  28          * @retval          : none
  29          *******************************************************************************/
  30          void DS3231ModifyByte(uchar addr, uchar val){
  31   1        writeByte2Addr(addr, 0, (val / 10 * 16 + val % 10), DS3231_Write_Address, 0);
  32   1      }
  33          
  34          /*******************************************************************************
  35          * @function        : ds3231 read a byte
  36          * @brief         : master through the I2C read a byte from ds3231's specified address register
  37          * @param           : addr : the specified address
  38          * @retval          : the read byte
  39          *******************************************************************************/
  40          uchar DS3231ReadByte(uchar addr){
  41   1        return readByteFromAddr(addr, 0, DS3231_Write_Address, DS3231_Read_Address, 0);
  42   1      }
  43          
  44          /*******************************************************************************
  45          * @function        : ds3231 read a byte
  46          * @brief         : master through the I2C read a byte from ds3231's specified address register
  47          * @param           : addr : the specified address
  48          * @retval          : the read byte
  49          *******************************************************************************/
  50          void DS3231ReadTimes(uint *ptr){
  51   1        uchar temp, i;
  52   1        DS3231ModifyByte(DS3231_STATUS, 0x00);//disable the alarm clock interruption
  53   1      
  54   1        for(i = 0; i < 7; i++){
C51 COMPILER V9.56.0.0   DS3231                                                            12/26/2017 12:46:04 PAGE 2   

  55   2          temp = DS3231ReadByte(DS3231_SECOND + i);
  56   2          *ptr++ = (temp / 16 * 10 + temp % 16);//hex to dec(decimalism)
  57   2        }
  58   1      }
  59          
  60          /*******************************************************************************
  61          * @function        : ds3231 read a byte about temperature
  62          * @brief         : master through the I2C read a byte about temperature from ds3231's specified address reg
             -ister of temperature
  63          * @param           : ptr : the temperature array
  64          * @retval          : temperature value
  65          *******************************************************************************/
  66          void DS3231ReadTmp(uint *ptr){
  67   1        uchar temp, i;
  68   1        DS3231ModifyByte(DS3231_STATUS, 0x00);//disable the alarm clock interruption
  69   1      
  70   1        DS3231ModifyByte(DS3231_CONTROL, 0x20);//conver the temperature datas in 0x11 & 0x12 register
  71   1      
  72   1        for(i = 0; i < 2; i++){
  73   2          temp = DS3231ReadByte(DS3231_TMPH + i);
  74   2          if(i == 0)
  75   2            *ptr++ = temp;
  76   2          else if(i == 1 && (ptr[0] & 0x80) == 0)
  77   2            *ptr = (temp >> 6) * 25;
  78   2          else
  79   2            *ptr = temp;
  80   2        }
  81   1      }
  82          
  83          /*******************************************************************************
  84          * @function        : ds3231 read a byte about its working status
  85          * @brief         : master through the I2C read a byte from ds3231's specified address register about ds3231
             -'s working status
  86          * @param           : addr : the specified address
  87          * @retval          : the byte of working status
  88          *******************************************************************************/
  89          uchar DS3231ReadAByteOfStatus(uchar addr){
  90   1        return DS3231ReadByte(addr);
  91   1      }
  92          
  93          /*******************************************************************************
  94          * @function        : set time's datas to ds3231
  95          * @brief         : master through the I2C to write some datas about time to ds3231's specified address regi
             -ster od time
  96          * @param           : ptr : the pointer of time's array
  97          * @retval          : none
  98          *******************************************************************************/
  99          void DS3231SetTimes(uint *ptr){
 100   1        uchar i;
 101   1        for(i = 0; i < 7; i++){
 102   2          DS3231ModifyByte(DS3231_SECOND + i, *(ptr + i));
 103   2        }
 104   1        autoWeek(*(ptr + 6), *(ptr + 5), *(ptr + 4));
 105   1      }
 106          
 107          /*******************************************************************************
 108          * @function        : ds3231 initial
 109          * @brief         : init the ds3231
 110          * @param           : none
 111          * @retval          : none
 112          *******************************************************************************/
 113          void DS3231Init(){
C51 COMPILER V9.56.0.0   DS3231                                                            12/26/2017 12:46:04 PAGE 3   

 114   1        DS3231ModifyByte(DS3231_HOUR, 0x00);//setting use 24-hour format(0-23)
 115   1        DS3231ModifyByte(DS3231_CONTROL, 0x04);//control register initial,stop to output square wave, disable the
             - alarm clock
 116   1        DS3231ModifyByte(DS3231_STATUS, 0x00);//status register initial,stop to output square wave, disable the a
             -larm clock
 117   1      }
 118          
 119          /*******************************************************************************
 120          * @function        : auto-adjust week register value
 121          * @brief         : master through the I2C auto-modify ds3231's specified address register of weekday
 122          * @param           : y: year's value, m : month's value, d : day's value
 123          * @retval          : the read byte
 124          *******************************************************************************/
 125          void autoWeek(uchar y, uchar m, uchar d){
 126   1        uchar week, day;
 127   1        day = WeekTab[m - 1];
 128   1        week = day >> 5;
 129   1        day &= 0x1f;
 130   1        if((m < 3) && (y & 0x03)){//nonleap year
 131   2          if(2 == m) day--;
 132   2          week++;
 133   2        }
 134   1        y = y + (y >> 2);
 135   1        week = (week + y + d + 2) % 7 + 1;
 136   1        DS3231ModifyByte(DS3231_WEEK, week);
 137   1      }
 138          
 139          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    398    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
